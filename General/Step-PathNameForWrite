<#
Set-PathNameForWrite.ps1 - Increments path to avoid file/folder name conflicts

Copyright (C) 2013  Brenton Keegan

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#>

function Set-PathNameForWrite
{
	
	#This function is designed to increment a path name (either folder or file) if it finds that the entered path exists. This is used to dynamically create folders and files while avoiding naming conflicts.
	#This script will append (1), (2), (3) etc to the end of the file or folder name. If the entered path is a file it will intelligently add it before the file extension (which is assumed is the last . in a file name and any characters thereafter)
	
		[cmdletbinding()]
	
		Param
		(
			[parameter(Mandatory=$true,ValueFromPipeline=$true)]
			[alias("path")]
			[alias("p")]
			[string]$pathtoincrement
			
	
	$folderdoesnotexists = $false
	$i = 0
	
	#initial check if entered path exists or not. If it doesn't just return the entered path. This bit was included to make calling this function easier. 
	#This way when the user of this function wants to create a file they can simply tell it to name it whatever this function returns without having to do any further checks
	if (!(Test-Path $pathtoincrement))
	{
	        return $pathtoincrement
	}
	else
	{
	
	        #if the file DOES exist it will perform a Get-Item on the *existing* file/folder as to determine whether it's a file. This is used to determine whether or not it needs to handle an extension.
	        $FSObject = Get-Item $pathtoincrement
	
	        #if it's not a directory it will perform a regex to find the last period in the path and any characters afterwords and store that in a variable.
	        #it will then strip the extension from the full path. If the file has no extension this will do nothing (and should not need to)
	        If ($FSObject.Attributes -ne "Directory")
	        {
	                #don't really use the $result but if I don't assign the result of the -match operation to anything the result will get automatically thrown in the function return.... and converting the datatype to an array and appending it to whatever else is returned....
	                $result = $pathtoincrement -match "\..+$"
	                $fileext = $matches[0]
	                $pathtoincrement = $pathtoincrement -replace "\..+$", ""
	
	        }
	
	        #increments until if finds a file/folder that does not exist - number stored in $i
	        do 
	        {
	                $i++
	                if (!(Test-Path $pathtoincrement"($i)"))
	                {
	                        $folderdoesnotexists = $true
	                }
	        }
	        while ($folderdoesnotexists -eq $false)
	
	        #may be confusing that this is the only return this function produces. if the path was a folder or the file had no extension then $fileext will be null so it would be the same as returning $pathtoincrement($i) so the statement below works in all cases.
	        return "$pathtoincrement($i)$fileext"
	}
}
